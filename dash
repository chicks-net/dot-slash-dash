#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use File::Slurp qw(read_file);
use JSON::MaybeXS qw(decode_json);

# constants
my $layout_filename = 'dash_lay.txt';

# main:
my $layout = read_layout();
my $plugins = read_plugins();
find_dimensions($layout,$plugins);

event_loop(); # research other event loops

sub event_loop {
	while (1) { # until ctrl-c
		# update contents
		foreach my $cell (sort keys %$layout) {
			next if $cell =~ /^_/; # skip hidden keys
			my $command = $layout->{$cell}->{command};
			# TODO: handle ANSI graphics
			my $out = `$command`;
			my @lines = split(/\n/,$out);
			$layout->{$cell}->{output} = \@lines;
		}

		print_layout($layout);
		sleep(5);
	}
}

sub print_layout {
	my ($layout) = @_;

	# build line format
	my $column_widths = $layout->{_column_widths};
	my $line_format = '';
	foreach my $column (sort keys %$column_widths) {
		next if $column eq 'total';
		$line_format .= ' %-' . $column_widths->{$column} . 's |';
	}
	$line_format .= "\n";

	# gather column lines
	my %column_contents;
	foreach my $column (sort keys %$column_widths) {
		next if $column eq 'total';
		foreach my $cell (sort keys %$layout) {
			next if $cell =~ /^_/; # skip hidden keys
			next unless $cell =~ /^$column/;
			push( @{ $column_contents{$column} }, @{ $layout->{$cell}->{output} });
			push( @{ $column_contents{$column} }, '=' x $column_widths->{$column} );
		}
	}

	# print scan lines
	for (my $row_index = 0; $row_index < 25 ; $row_index++) {
		my @row_parts;
		foreach my $column (sort keys %$column_widths) {
			next if $column eq 'total';
			push(@row_parts,$column_contents{$column}->[$row_index] || '');
		}
		printf($line_format,@row_parts);
	}
}

#
# handle cells within layout
#

sub find_dimensions {
	my ($layout,$plugins) = @_;

	my %columns;
	foreach my $cell (keys %$layout) {
		my $column = substr($cell,0,1); # don't try more than 26 columns
		my $request = $layout->{$cell}->{request};

		if (defined( $plugins->{$request} )) {
			$layout->{$cell} = $plugins->{$request};
		} else {
			# default
			$layout->{$cell} = $plugins->{'default'};
			# TODO: a fresh hash each time
			# TODO: include `echo $cell/$name` before `echo unimplemented`
		}
		my $width = $layout->{$cell}->{width};
		if ($width > ($columns{$column} || 0)) {
			$columns{$column} = $width;
		}
	}

	# overall width
	my $overall_width = ( (scalar keys %columns) -1 ) * 3; # 3 spaces between columns
	foreach my $column (keys %columns) {
		$overall_width += $columns{$column};
	}
	$columns{total} = $overall_width;

	# stuff into 'hidden' column.
	$layout->{_column_widths} = \%columns;
}

sub read_plugins {
	my %plugins = (
		default => {
			width => 14,
			height => 2,
			name => 'default',
			command => "echo 'unimplemented'",
		},
	);

	my $plugins_dir = "dash_cells";
	opendir(PLUGINS,$plugins_dir) or die "could not opendir $plugins_dir: $!";
	my @plugin_files = readdir(PLUGINS);
	closedir(PLUGINS);

	foreach my $plugin_file (@plugin_files) {
		next if $plugin_file =~ /^[.]/; # skip hidden
		next unless $plugin_file =~ /[.]json$/; # skip unless json
		my $hash = read_json("$plugins_dir/$plugin_file");
		my $name = $hash->{name};
		$plugins{$name} = $hash;
	}

	#print Dumper(\%plugins);
	return(\%plugins);
}

#
# top of layout - dash_lay.txt
#

sub read_layout {
	# no arguments
	my %layout;
	my @layout_lines = read_file($layout_filename);
	foreach my $lay_line (@layout_lines) {
		chomp($lay_line);
		my ($cell, $contents) = split(/:\s+/,$lay_line);

		$layout{$cell} = {
			request => $contents,
		};
	}
	return (\%layout);
}

#
# utility functions
#

sub read_json {
	my ($json_filename) = @_;
	my $file_contents = read_file($json_filename);

	my $json = JSON::MaybeXS->new->allow_nonref;
	my $js_ref = $json->decode($file_contents);
	die "no ref back from json->decode()" unless $js_ref;

	return $js_ref;
}
